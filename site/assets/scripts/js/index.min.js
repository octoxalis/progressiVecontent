
//=== SET_o: tools.js ===

var SET_o =
{
  restore_b: true,
}


//=== LIB_o: lib.js ===

var LIB_o =
{


  /*//------ NOT USED
  eval__v:
  code_s =>
  code_s && (new Function( code_s ))()
,
  */



  //=== CSS ===
  rootVar__s:
  (
    var_s
  ) => window.getComputedStyle( document.documentElement ).getPropertyValue( var_s ) || ''
,



  rootVar__v:
  (
    var_s,
    val_s
  ) => document.documentElement.style.setProperty( var_s, val_s )
,



  //=== ELEMENT ===
  nodeId__o:
  (
    id_s,
    node_e=document
  ) => node_e.querySelector( `#${id_s}` )
,



  id__o:
  (
    id_s,
    node_e=document
  ) => node_e.querySelector( `[data-id="${id_s}"]` )
,


data__o:
  (
    data_s,
    node_e=document
  ) => node_e.querySelector( `[data-${data_s}]` )
,



  hyphen__o:
  (
    data_s,
    node_e=document
  ) => node_e.querySelector( `[data--=${data_s}]` )
,



  /*
  * @param {*} tag_e : node element
  * @param {*} attrib_a : [ [ 'attribute_s', 'value_' ], ]
  */
  attribute__v
  (
    tag_e, 
    attrib_a
  )
  {
    for ( at_a of attrib_a ) tag_e.setAttribute( at_a[0], at_a[1] )
  }
,



  toggle__v:
  (
    data_s,
    class_s,
    node_e=document
  ) => LIB_o.hyphen__o( data_s, node_e ).classList.toggle( class_s )
,



toggleId__v:
(
  id_s,
  class_s
) =>
{
  const id_e = 
    LIB_o
      .nodeId__o( id_s )
  id_e && id_e.classList.toggle( class_s )
}
,



  //=== EVENTS ===
  keyClick__v:
  (
    tag_e
  ) =>
  {
    tag_e.addEventListener( 'keyup',
    key_e =>
    {
      if ( key_e.keyCode === 13 )
      {
        key_e.preventDefault()
        tag_e.click()
      }
    } )
  }
,

  //-------------------------------
  /* //XXXXXXXXXXXXXXXXXXXXXXXXXXX
  keyOver__v:
  tag_e =>
  {
    tag_e.addEventListener( 'keyup',
    key_e =>
    {
      if ( key_e.keyCode === 13 )
      {
        key_e.preventDefault()
        const event_e = new MouseEvent( 'mouseover',
        {
          'view': window,
          'bubbles': true,
          'cancelable': true
         } )
        tag_e.dispatchEvent( event_e )
      }
    } )
  }
,
  */


  invisible__v:
  (
    node_e,
    method_s='remove'
  ) =>
  {
    node_e
      .classList
      [`${method_s}`]( 'invisible' )
  }
,




  //=== FRAME ===
/**
   * 
   * @param {*} tag_s 
   * @param {*} block_s : 'head' || 'body'
   * @param {*} attrib_a : [ [ 'attribute_s', 'value_' ], ]
   */
  append__v:
  (
    tag_s,
    block_s,
    attrib_a
  ) =>
  {
    const tag_e = document.createElement( tag_s )
    document[`${block_s}`].appendChild( tag_e )
    LIB_o
      .attribute__v( tag_e, attrib_a )
  }
,

  adopt__v:
  (
    adopter_e,
    adopted_e,
    callback_f
  ) =>
  {
    const scriptify__v =
    root_e =>
    {
      for
        (
          const script_e
          of
          root_e
            .querySelectorAll( 'script[data-node]' )
        )
        LIB_o
          [`slot${script_e.dataset.node}__v`]
          (
            script_e
              .dataset
              .list
              .split( ' ' )
          )
    }

    LIB_o
      .invisible__v
      (
        adopted_e,
        'add'
      )
    adopted_e
      .addEventListener
      (
        'load',
        () =>
        {
          const content_e =
            adopted_e.contentDocument.body
            ||
            adopted_e.contentDocument
          const root_e =
            content_e
              .children[0]
          adopter_e
            .appendChild( root_e )
          scriptify__v( root_e )
          LIB_o
            .slotInit__v( root_e )
          callback_f && callback_f( adopter_e, root_e )
          LIB_o
            .invisible__v
            (
              adopted_e
            )
          adopted_e
            .remove()
        }
      )
  }
,



  /**
   * 
   * @param [String]: links id
   * NB: link ID suffix: '_css'
   */
  link__v:
  (
    id_s
  ) =>
  {
    LIB_o.append__v( 'link', 'head',
      [
        ['id', `${id_s}_css`],
        ['rel', 'stylesheet'],
        ['href', `http://127.0.0.1:8080/assets/styles/css/${id_s}.min.css`]
      ] )
  }
,


  /**
   * 
   * @param [String]: links id
   * NB: link ID suffix: '_css'
   */
  slotLink__v:
  (
    id_a
  ) =>
  {
    for ( let id_s of id_a )
      !document.querySelector( `link#${id_s}_css` ) && LIB_o.link__v( id_s )
  }
,


  /**
   * 
   * @param [String]: scripts id
   * NB: script ID suffix: '_js'
   */
  script__v:
  (
    id_s
  ) =>
  {
    LIB_o.append__v( 'script', 'body',
      [
        ['id', `${id_s}_js`],
        ['src', `http://127.0.0.1:8080/assets/scripts/js/${id_s}.min.js`]
      ] )
  }
,


  /**
   * 
   * @param [String]: scripts id
   * NB: script ID suffix: '_js'
   */
  slotScript__v:
  (
    id_a
  ) =>
  {
    for ( let id_s of id_a )
      !document.querySelector( `script#${id_s}_js` ) && LIB_o.script__v( id_s )
  }
,



  //=== SLOT ===
  slot__v:
  (
    path_s,
    slot_s,
    step_n,
    callback_f
  ) =>
  {
    const adopter_e =
      LIB_o
        .nodeId__o( 'sections' )
    const iframe_e =
      document
        .createElement( 'iframe' )
    //???? iframe_e.src = `${path_s}/${slot_s}.html`
    iframe_e.src = `/${path_s}/${slot_s}.html`
    iframe_e.dataset.slot_n = ''+step_n
    adopter_e
      .appendChild( iframe_e )
    LIB_o
      .adopt__v( adopter_e, iframe_e, callback_f )
  }
,


  slotInit__v:
  (
    section_e
  ) =>
  {
    const span_e =    //:-- slot remove button
      section_e
       .querySelector( 'span[data-slot_s]' )
    if ( span_e )
    {
      span_e
        .addEventListener
        (
          'click',
          () => 
            SLOT_o
              .remove__v( section_e )
        )
    }
    const button_a =    //: slot image unfold button
      section_e
        .querySelectorAll( 'button[aria-label="unfold image"]' )
    for ( const button_e of button_a )
    {
      button_e
        .addEventListener
        (
          'mouseover',
          () =>
            NOTE_o
              .unfold__v( button_e )
        )
    }
    const link_a =        //: slot image link button
      section_e
        .querySelectorAll( 'a[class="note_link"]' )
    for ( const link_e of link_a )
    {
      link_e
        .addEventListener
        (
          'click',
          () =>
            NOTE_o
              .act_o[`${link_e.dataset.method}`]
              (
                link_e,
                `${link_e.dataset.param}`
              )
        )
      link_e
        .addEventListener
          (
            'keydown',
            () =>
              link_e
                .click()
          )
    }
  }
,



//=== UI ===
 scroll__v:    //:- scroll to top/bottom
  (
    bottom_b=false
  ) =>
  {
    const options_o =
    {
      top: bottom_b ?
        document.documentElement.clientHeight
        :
        0,
      left: 0,
      behavior: 'smooth'
    }
    window
      .scroll( options_o )
  }
,
}


//=== SER_o: service.js ===

var SER_o =
{
  types_a:
    [
      'RESTORE',
      'REMOVE',
      'ROUTE',
      'INITIAL',
    ]
,

  init__v    //:--Service worker registration
  (
    url_s
  )
  {
    //!!! comment out the following line if HTTP dev server supports headers
    //..... if ( 'http://127.0.0.1:8080/' === 'http://127.0.0.1:8080/' ) return  //: skip service worker in dev mode
    //>
    const REGISTRATION_s = 'ServiceWorker registration'
    //-- const SUCCESS_s = 'successful'
    const FAILURE_s = 'failed'
    navigator  //--  navigator.serviceWorker.register( url_s } )  //: WITHOUT Service-Worker-Allowed HTTP header 
      .serviceWorker
      .register
        (
          url_s,
          {
            scope: '/'
          }
        )
      .then
        (
          null,    //-- .then( registration => console.log(  `${REGISTRATION_s} ${SUCCESS_s} [scope: ${registration.scope}]` ),
          error_o => console.log( `${REGISTRATION_s} ${FAILURE_s} [error: ${error_o}]` )
        )
    navigator
      .serviceWorker
      .onmessage = msg_o => SER_o.receive__v( msg_o )
  }
,
  
  
  send__v    //:-- Post message
  (
    type_s,
    payload_o=null
  )
  {
    navigator
      ?.serviceWorker
      ?.controller
      ?.postMessage
      (
        {
          type_s: type_s,
          payload_o: payload_o
        }
      )
  }
,




receive__v    //:-- Listen to messages
(
  msg_o
)
{
  if ( !msg_o.data ) return console.log( 'An unidentified message has been sent by the Service Worker' )   //: error
  //>
  const type_s = msg_o.data.type_s
  if ( !SER_o.types_a.includes( type_s ) ) return console.log( 'An unknown message type has been sent by Service Worker' )
  //>
  SER_o
    [`${type_s}__v`]
    (
      msg_o.data.payload_o
    )
}
,



  RESTORE__v   //: from worker
  (
    restore_a    //:-- SWO_o.restore_a []
  )
  {
    console.time( 'SER_o.RESTORE__v' )
    //!!!!!!!!!!!!!!!!!!!!!!
    let slot_n = 0
    for ( let path_a of restore_a )
    {
      const [ path_s, slot_s ] = path_a
      if ( SET_o.restore_b )
      {
        IND_o
        .load__v
          (
            path_s,
            slot_s,
            slot_n,
            section_e =>    //: callback_f
            {
              SLI_o
                .slider_c
                .add__v
                (
                  section_e,
                  slot_n,
                  [
                    `data-section=${slot_n}`, 
                    `data-slot_s=${section_e.dataset.slot_s}`
                  ],
                )
            },
          )
      }
      ++slot_n
    }
    //!!!!!!!!!!!!!!!!!!!!!!
    console.timeEnd( 'SER_o.RESTORE__v' )
  }
,



  REMOVE__v    //: to worker
  (
    slot_s
  )
  {
    SER_o
      .send__v
      (
        'REMOVE',
        slot_s
      )
  }
,



  INITIAL__v   //: from worker
  (
    initial_b
  )
  {
    window
      .localStorage
      .setItem
        ( 'initial_b', initial_b )
  }
  ,

}


//=== IND_o: index.js ===

var IND_o =
{

  load__v
  (
    path_s='sys',
    slot_s='docs',
    slot_n=-1,          //: negative indices for sys slots
    callback_f=null
  )
  {
    LIB_o
      .slot__v
      (
        path_s,
        slot_s,
        slot_n,
        (        //: callback_f
          _e,    //: not used
          section_e,
        ) =>
        {
          section_e.dataset.slot_n = ''+slot_n
          section_e.dataset.slot_s = slot_s
          callback_f
            && callback_f( section_e )
          IND_o
            .listenSection__v( section_e )
          IND_o
            .toggleSection__v( section_e )
          
          setTimeout    //: avoid unstyled content flash
          (
            () =>
            {
              LIB_o
                .invisible__v
                (
                  section_e
                )
              },
            20
          )
        }
      )
    IND_o
      .clearUrl__v()
  }
,



  unfold__v
  ()
  {
    //?? LIB_o
    //??   .scroll__v()    //!!! scroll to top
    if ( !LIB_o.nodeId__o( 'section_docs' ) )  //: docs section not yet loaded
    {
      IND_o
        .load__v()    //: default args
    }
    LIB_o
      .toggleId__v
      (
        'sections_slider',
        'aside'
      )
  }
,



listen__v
  ()
  {
    LIB_o
      .nodeId__o( 'nav_bar' )
      .addEventListener
      (
        'click',
        event_o =>
        {
          const target_e =
            event_o
              .target
              .closest( 'button' )
          if ( target_e )
          {
            const id_s =
              target_e
                .id
            if ( id_s.includes( 'scroll_' ) )
            {
              return void LIB_o
                .scroll__v( id_s === 'scroll_bottom' )
            }
            //>
            if ( id_s.includes( 'sections_' ) )
            {
              IND_o
                .unfold__v()
            }
          }
        }
      )
    }
,



  listenSection__v
  (
    section_e
  )
  {
      section_e
        .querySelector( 'button[data-slot_s]' )
        .addEventListener
        (
          'click',
          () =>
          {
            section_e
              .querySelector( 'article[data-slot_s]' )
              .classList
              .toggle( 'retract' )
          }
        )
  }
,



  toggleSection__v
  (
    section_e
  )
  {
    section_e
      .querySelector( 'article[data-slot_s]' )
      .classList
      .toggle( 'retract' )
    section_e
      .scrollIntoView( {behavior: "smooth", block: "start"} )
  }
,



  service__v
  ()
  {
    if ( !'serviceWorker' in navigator )    //:- register service worker
    {
      return void window
        .alert( "To visit progressiVecontent, please use a browser with Service Workers enabled" )
    }
    //>
    SER_o
      .init__v( 'http://127.0.0.1:8080/service_worker.min.js' )
  }
,




initial__v
()
{
  IND_o
    .unfold__v()
  LIB_o
    .invisible__v
    (
      LIB_o
        .nodeId__o( 'initial' ),
      'add'
    )
; [
    'scroll_top',
    'scroll_bottom'
  ]
    .forEach
      (
        scroll_s =>
        {
          LIB_o
          .invisible__v
          (
            LIB_o
              .nodeId__o( scroll_s ),
            'remove'
          )
        }
      )
}
,




clearUrl__v
  ()
  {
    if ( window.location.hash )    //: location from an internal link
    {
      window
        .history
        .pushState
        (
          {
            hash: window.location.hash.slice( 1 )    //: save hash (e.g. '/slots/page.html')
          },
          'progressiVecontent',
          'http://127.0.0.1:8080/'      //: to site root
        )
    }
  }
,



  colorMode__v
  (
    set_s,   //: hue or luminosity: hue_base || lum_mode
    set_n    //: if page load, set_n undefined (no parameter)
  )
  {
    if
    (
      set_n === undefined  //: page load only
    )
    {
      set_n =
        set_s === 'hue_base' ?
        '220'
        :
        '1'
    }
    window
      .localStorage
      .setItem
        ( set_s, set_n )
    LIB_o
      .rootVar__v
        (
          `--${set_s}`,
          set_n
        )
    console
      .log
        ( `Current ${set_s}: ${set_n}` )
  }
,

}


void function    //:- init serviceWorker & launcher event
()
{
  IND_o
    .listen__v()
  LIB_o
    .rootVar__v
    (
      '--HTML_OPAC',
      '1'        //:- set HTML element opacity (initially transparent)
    )
  IND_o
    .colorMode__v
      ( 'hue_base' )
  IND_o
    .colorMode__v
      ( 'lum_mode' )
  const initial_b = false ///!!! TEMPORARY !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //... window
    //...   .localStorage
    //...   .getItem
    //...     ( 'initial_b' )
  if ( !initial_b )
  {
    window
      .requestIdleCallback
        (
          IND_o.service__v
        )
    LIB_o
      .nodeId__o( 'initial' )
      .addEventListener
      (
        'click',
        () =>
        {
          IND_o
            .initial__v()
        }
      )
    return
  }
  //>
  IND_o
    .initial__v()
} ()









