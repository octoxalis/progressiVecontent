class Graph{constructor(_=null){this.node_a=[],this.facet_c=_}node__n(_){const t=this.node_a.length;return _.id__v(t),this.node_a[t]=new Node(_),t}link__v(_,t,n=null){const e=new Link(_,t,n);this.node_a[_].link__v(e)}linkLabel__v(_,t){this.link__v(this.node__n(new Facet({label:_})),this.node__n(new Facet({label:t})))}link__a(_,t){const n=this.node__n(_),e=this.node__n(t);return this.link__v(n,e),[n,e]}linked__a(_,t=null){const n=new Set,e=_=>{n.add(_),t&&t(_);for(let t of this.node_a[_].link_a){const _=t.to__n();n.has(_)||e(_)}};return e(_),n}aggregated__a(){const _=new Map,t=new Set;return this.node_a.forEach((n=>{const e=n.id__n();t.has(e)||_.set(e,this.linked__a(e,(_=>t.add(_))))})),_}nodeId__o(_){return this.node_a.find((t=>t.id__n()===_))}nodeLabel__o(_){return this.node_a.find((t=>t.label__s()===_))}static json__c(_){return _.__proto__=this.prototype,_}}class Node{constructor(_){this.link_a=[],this.facet_c=_}facet__c(){return this.facet_c}label__s(){return this.facet_c.label__s()}id__n(){return this.facet_c.id__n()}link__v(_){this.link_a.push(_)}link__c(_){return this.link_a.find((t=>t.from__n()===this.facet_c.id__n()&&t.to__n()===_))}foreach__v(_){this.link_a.forEach((t=>_(t)))}static json__c(_){return _.__proto__=this.prototype,_}}class Link{constructor(_=null,t=null,n=null){this.from_n=_,this.to_n=t,this.facet_c=n}from__n(){return this.from_n}to__n(){return this.to_n}facet__c(){return this.facet_c}link__a(){return[this.from_n,this.to_n]}link__b(_,t){return this.from_n===_&&this.to_n===t}label__v(_){this.facet_c.label__v(_)}static json__c(_){return _.__proto__=this.prototype,_}}class Facet{constructor(_=""){this.label_a=[],this.label_a.push(_)}id__v(_){this.id_n=_}id__n(){return this.id_n}label__s(){return this.label_a[0]}label__v(_){this.label_a.find((t=>t===_))||this.label_a.push(_)}static json__c(_){return _.__proto__=this.prototype,_}}