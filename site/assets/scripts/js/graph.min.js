// === PAN_o: pan.js ===

var PAN_o =
{
  gapX_n:      0,
  gapY_n:      0,
  offsetX_n:   0,
  offsetY_n:   0,
  x_n:         0,
  y_n:         0,
  move_b:      false,

  scale_n:     1.0,
  ratio_n:     -.01,
  minScale_n:  .1,
  maxScale_n:  10,
  panMove_n:   10,
  zoomScale_n: 10,



  init__v
  (
    target_s,
    dimension_a,
    options_o={}    //: { zoom_b: false ||true, pan_b: false ||true }
  )
  {
    PAN_o.target_e  = document.querySelector( target_s )
    PAN_o.target__v( dimension_a )
    if ( options_o.zoom_b ) PAN_o.listenZoom__v()
    if ( options_o.pan_b ) PAN_o.listenPan__v()
  }
,



  target__v    //: Set geometry constants
  (
    dimension_a  //: if only 2 dimensions, viewport = viewbox
  )
  {
    PAN_o.target_e.width  = PAN_o.width_n  = dimension_a[0]
    PAN_o.target_e.height = PAN_o.height_n = dimension_a[1]
    PAN_o.minX_n = dimension_a[2] || dimension_a[0]
    PAN_o.minY_n = dimension_a[3] || dimension_a[1]
    PAN_o.viewbox__v( 0, 0, PAN_o.width_n, PAN_o.height_n )
  }
,



  viewbox__v    //: Set SVG viewbox dimensions
  (
    minX_n,
    minY_n,
    width_n,
    height_n
  )
  { PAN_o.target_e.setAttribute( 'viewBox', `${minX_n} ${minY_n} ${width_n} ${height_n}` ) }
,



  viewbox__a      //: Get SVG viewbox dimensions
  ()
  { return PAN_o.target_e.getAttribute( 'viewBox' ).split( ' ' ) }
,



  listenZoom__v      //: Set zoom event listeniers
  ()
  { [ 'wheel', 'touchstart', 'keydown' ].forEach( type_s => PAN_o.listen__v( type_s, 'Zoom' ) ) }
,



  wheelZoom__v
  (
    event_o
  )
  { PAN_o.viewbox__v( ...PAN_o.scale__a( event_o.deltaY < 0 ? PAN_o.zoomScale_n : -PAN_o.zoomScale_n ) ) }
,



  touchstartZoom__v
  (
    event_o
  )
  {
    if ( event_o.touches.length < 2 ) return void PAN_o.touchstartStart__v( event_o )
    //>
    PAN_o.viewbox__v( ...PAN_o.scale__a( event_o.touches.length > 2 ? PAN_o.zoomScale_n : -PAN_o.zoomScale_n ) )
  }
,



  keydownZoom__v:
  (
    event_o
  ) =>
  {
    const code_n = event_o.keyCode
    if ( code_n === 107  || code_n === 109 )    //: NumPadPlus || NumPadMinus
      PAN_o.viewbox__v( ...PAN_o.scale__a( code_n === 109 ? -PAN_o.zoomScale_n : code_n === 107 ? PAN_o.zoomScale_n : 0 ) )  //: no zoom if 0
  }
,



  listenPan__v      //: Set pan event listeniers
  ()
  { [ 'mousedown', 'keydown' ].forEach( type_s => PAN_o.listen__v( type_s, 'Start' ) ) }    //: no touchstart (handled in touchstartZoom__v )
    
,



  mousedownStart__v
  (
    event_o
  )
  { return PAN_o.panStart__v( ...PAN_o.client__a( event_o ), ...PAN_o.handle__a( event_o ) ) }
,



  touchstartStart__v    //: event handle from touchstartZoom__v
  (
    event_o
  )
  { if ( event_o.touches.length < 2 ) PAN_o.panStart__v( ...PAN_o.client__a( event_o ), ...PAN_o.handle__a( event_o ) ) }
,



  keydownStart__v
  (
    event_o
  )
  {
    const code_n = event_o.keyCode
    if ( PAN_o.move_b && code_n >= 37 && code_n <= 40 ) return void PAN_o.panMove__v( event_o )    //: Arrows
    if ( code_n === 32 ) return void PAN_o.panStart__v( ...PAN_o.client__a( event_o ), ...PAN_o.handle__a( event_o ) )    //: Spacebar
    if ( code_n === 13 ) return void PAN_o.panStop__v( event_o )    //: Enter
  }
,



  panStart__v
  (
    atX_n,
    atY_n,
    move_s,
    stop_s
  )
  {
    PAN_o.move_b = true
    const [ minX_s, minY_s ] = PAN_o.viewbox__a()
    PAN_o.gapX_n = atX_n - PAN_o.offsetX_n
    PAN_o.gapY_n = atY_n - PAN_o.offsetY_n
    PAN_o.gapX_n = atX_n - -minX_s
    PAN_o.gapY_n = atY_n - -minY_s
    PAN_o.target_e.addEventListener( move_s, PAN_o.panMove__v, false)
    PAN_o.target_e.addEventListener( stop_s, PAN_o.panStop__v, false)
  }
,




  panMove__v
  (
    event_o
  )
  {
    if ( PAN_o.move_b )
    {
      const [ clientX_n, clientY_n ] = PAN_o.client__a( event_o )
      PAN_o.x_n = clientX_n - PAN_o.gapX_n
      PAN_o.y_n = clientY_n - PAN_o.gapY_n
      PAN_o.offsetX_n = PAN_o.x_n
      PAN_o.offsetY_n = PAN_o.y_n
      const [ minX_s, minY_s, width_s, height_s ] = PAN_o.viewbox__a()
      PAN_o.viewbox__v( ''+-PAN_o.x_n, ''+-PAN_o.y_n, width_s, height_s )
    }
  }
,




  panStop__v
  (
    event_o
  )
  {
    PAN_o.move_b = false
    const [ move_s, stop_s ] = PAN_o.handle__a( event_o )
    PAN_o.target_e.removeEventListener( move_s, PAN_o.panMove__v, false)
    PAN_o.target_e.removeEventListener( stop_s, PAN_o.panStop__v, false)
  }
,



  scale__a        //: Get [String] for SVG viewBox geometry
  (
    scale_n
  )
  {
    PAN_o.scale_n =    //: update scale_n
      Math.min(Math.max( PAN_o.minScale_n, PAN_o.scale_n + ( scale_n * PAN_o.ratio_n ) ), PAN_o.maxScale_n )
    const width_n = Math.round(PAN_o.scale_n * PAN_o.width_n )
    const height_n = Math.round(PAN_o.scale_n * PAN_o.height_n )
    const [ minX_s, minY_s ] = PAN_o.viewbox__a()
    return [ minX_s, minY_s, ''+width_n, ''+height_n ]
  }
,



  client__a
  (
    event_o
  )
  {
    if ( event_o.clientX !== undefined ) return [ event_o.clientX, event_o.clientY ]    //: mouse event
    if ( event_o.changedTouches !== undefined ) return [ event_o.changedTouches[0].clientX, event_o.changedTouches[0].clientY ]    //: touch event
    if ( event_o.keyCode )    //: keyboard event
    {
      const code_n = event_o.keyCode
      const gapX_n = code_n === 37 ? -PAN_o.panMove_n : code_n === 39 ? PAN_o.panMove_n : 0
      const gapY_n = code_n === 38 ? -PAN_o.panMove_n : event_o.keyCode === 40 ? PAN_o.panMove_n : 0
      return [ gapX_n + PAN_o.x_n, gapY_n + PAN_o.y_n ]
    }
    return [0, 0] //: no move if undefined event
  }
,



  listen__v
  (
    type_s,
    method_s
  )
  {
    const target_e = type_s === 'keydown' ? document : PAN_o.target_e    //: SVG element is not an input element: use document element
    target_e.addEventListener
      (
        type_s,
        event_o =>
        {
          event_o.preventDefault()
          PAN_o[`${type_s}${method_s}__v`]( event_o )
        }
      )
  }
,



  handle__a
  (
    event_o
  )
  {
    if ( event_o.clientX !== undefined ) return [ 'mousemove', 'mouseup' ]    //: mouse event
    if ( event_o.changedTouches !== undefined ) return [ 'touchmove', 'touchend' ]    //: touch event
    return [ 'keydown', 'keydown' ]    //: keyboard event
  }
,


}


// === SET_o: sets.js ===
//-> export
var SET_o =
{
  
  
  disjoint__a  //:- create 2 disjoint Integer Sets by comparing 2 Integers Sets
  (
    ref_a,    //:- Set( int )
    comp_a    //:- Set( int )
  )
  {
    const set_a =
      [
        new Set(),
        new Set()
      ]
    ref_a
      .forEach
      ( 
        ref_n =>
        {
          if ( !comp_a.has( ref_n ) )
            set_a[0]
              .add( ref_n )
        }
      )
    comp_a
      .forEach
      ( 
        comp_n =>
        {
          if ( !ref_a.has( comp_n ) )
            set_a[1]
              .add( comp_n )
        }
      )
    //-->
    return set_a
  }
,
}


// === GRA_o: graph.js ===

var GRA_o =
{
  graph_c:  null,
  dim_n: 24,
  gap_n: 2,
  minDim_n: 16,
  maxDim_n: 32,
  node_s: 'node_',

  slider_e: null,
  svg_e: null,
  selected_a: new Set(),


  
  async fetch__v
  (
    url_s
  )
  {
    let fetch_o =
      await fetch
      (
        url_s
      )
    if ( !fetch_o.ok ) return void alert( `"HTTP-Error: ${fetch_o.status}` )  //!!! TODO: better alert
    //-->
    const json =
      await fetch_o
        .json()
    //-->
    return json
  }
,




  nodes__v    //:- select grid nodes
  (
    event_e
  )
  {
    const target_e =
      event_e
        .target
        .closest( '[data-step]' )
    if ( target_e.classList.contains( 'slide_focus' ) )
    {
      LIB_o
        .invisible__v
        (
          GRA_o.svg_e
        )
      const at_n =
        GRA_o
          .slider
          .atStep__n()
      const label_e =
        LIB_o
          .nodeId__o( 'labels_docs' )
          .querySelector( `li[data-slot_n="${at_n}"]` )
      const docs_a =
        new Set
        (
          label_e
            .dataset['-']
            .split( ' ' )
        )
      SET_o
        .disjoint__a
        (
          GRA_o.selected_a,
          docs_a
        )
        .forEach
        (
          at_a =>
            GRA_o
              .toggle__v( at_a )
        )
      GRA_o
        .selected_a = docs_a
    }
  }
,



  toggle__v
  (
    set_a
  )  
  {
    set_a
      .forEach
      (
        at_n =>
        {
          const at_e =
            GRA_o
              .svg_e
              .querySelector( `circle:nth-child(${at_n})` )    //-- rect
          at_e &&
            at_e
              .classList
              .toggle( 'node_selected' )
        }
      )  
  }    
,  



  nodeOpen__v    //:- diplay node data
  (
    event_e
  )
  {
    const target_e =
      event_e
        .target
    GRA_o
      .node__v
      (
        target_e,
        target_e.classList.contains( 'node_selected' )
      )
    SLOT_o
      .display__e( 'section_contents' )
      .classList
      .toggle( 'retract' )
    const node_e =
      GRA_o
        .svg_e
        .querySelector( '.node_focus' )
    if ( node_e )    //: deselect previous focused node
    {
      node_e
       .classList
       .remove( 'node_focus' )
    }
    target_e    //: select new focused node
      .classList
      .add( 'node_focus' )
  }
,



  nodeClose__v
  ()
  {
    SLOT_o
      .display__e( 'section_contents' )
      .classList
      .toggle( 'retract' )
  }
,



  sectionSlider__v
  ()
  {
    SLI_o
      .slider_c
      .cycle__v( SLI_o.slider_c.capacity__n() - 1 )
  }
,



  nodeLink__v
  ()
  {
    const step_s =
      GRA_o
        .nodeStep__s()
    const slot_s =
      GRA_o
        .nodeSlot__s( step_s )
    let section_e =
      document
        .querySelector
        (
          `section[data-slot_n="${step_s}"]`
          //...`section[data-rank="${+step_s + 1}"]`              //: Number cast
        )
    if ( !section_e )  //: not yet fetched
    {
      IND_o
        .load__v
        (
          'slots',      //: path_s default
          slot_s,
          +step_s,        //: Number
          section_e =>    //: callback_f
          {
            SLI_o
              .slider_c
              .add__v
              (
                section_e,
                0,    //: NOT auto indexed
                [
                  `data-section=${step_s}`,
                  `data-slot_s=${section_e.dataset.slot_s}`
                ],
                () =>    //: callback_f
                {
                  GRA_o
                    .sectionSlider__v()
                  LIB_o
                    .rootVar__v
                    (
                      '--SECTIONS_CAP',
                      SLI_o.slider_c.capacity__n()
                    )
                }
              )
          }
        )
    }
    GRA_o.nodeClose__v()
  }
,



  nodeStep__s
  ()
  {
    return (
      LIB_o
        .id__o
        (
          'title',
          SLOT_o
            .display__e( 'section_contents' )
        )
        .getAttribute( 'data-slot_s' )  //: set by node__v
        .slice( 'node_'.length )
    )
  }
,



  nodeSlot__s
  (
    step_s
  )
  {
    return LIB_o
      .nodeId__o( 'docs_labels' )
      .querySelector( `li[data-slot_n="${step_s}"]` )
      .dataset.slot_s
  }
,



  node__v
  (
    node_e,
    selected_b
  )
  {
    const at_n =
      +node_e    //: number cast
        .id
        .slice
        (
          GRA_o
            .node_s
            .length
        )
    const labels_e =
      LIB_o
        .nodeId__o( 'docs_labels' )
    const data_e =
      labels_e
        .querySelector( `li[data-slot_n="${at_n}"]` )
    if ( !data_e ) return
    //>
    const section_e =
      SLOT_o
        .display__e( 'section_contents' )
    const title_e =
      LIB_o
        .id__o
        (
          'title',
          section_e
        )
    title_e
      .setAttribute
      (
        'data-slot_s',
        node_e.id
      )
    title_e
      .innerHTML =
        data_e
          .dataset
          .slot_s
          .replace
          (
            '_',
            ' '
          )
    const labels_s =
      data_e
      .dataset['-']
    let list_s = ''
    for ( let lab_s of labels_s.split( ' ' ) )
    {
      list_s += `<li>${lab_s}`
    }
    LIB_o
      .id__o( 'list' )
      .innerHTML = list_s
    const select_s =
      selected_b ?
        'NODE_BACK_SELECTED'
        :
        'NODE_BACK_NOT_SELECTED'
    LIB_o
      .rootVar__v
      (
        '--NODE_BACK',
        LIB_o
          .rootVar__s
            (
              `--${select_s}`
            ) 
      )
  }
,


  skin__v
  ()
  {
    if ( LIB_o.nodeId__o( 'section_skin' ) )  return    //: already loaded
    //->
    IND_o
      .load__v
      (
        path_s='sys',
        slot_s='skin',
        slot_n=-2,          //: negative indices for sys slots
        callback_f=null
      )
  }
,
  

  bookmark__v
  ()
  {
    if ( LIB_o.nodeId__o( 'section_bookmark' ) )  return    //: already loaded
    //->
    IND_o
      .load__v
      (
        path_s='sys',
        slot_s='bookmark',
        slot_n=-3,          //: negative indices for sys slots
        callback_f=null
      )
  }
,



  listen__v
  ()
  {
    GRA_o.slider_e
      .addEventListener
      (
        'click',
        GRA_o.nodes__v
      )
    GRA_o.svg_e
      .addEventListener
      (
        'click',
        GRA_o.nodeOpen__v
      )
      /*
    GRA_o.svg_e
      .addEventListener
      (
        'touchstart',
        GRA_o.nodeOpen__v
      )
      */
    LIB_o
      .nodeId__o( 'skin_link' )
      .addEventListener
      (
        'click',
        _o =>    //: not used
        {
          GRA_o
            .skin__v()
        }
      )
    LIB_o
      .nodeId__o( 'bookmark_link' )
      .addEventListener
      (
        'click',
        _o =>    //: not used
        {
          GRA_o
            .bookmark__v()
        }
      )
    const section_e =
      SLOT_o
        .display__e( 'section_contents' )
    section_e
      .querySelector( 'dl' )
      .addEventListener
      (
        'click',
        //XX GRA_o.nodeClose__v
        GRA_o.nodeLink__v
        )
    LIB_o
      .id__o
      (
        'close',
        section_e
      )
      .addEventListener
      (
        'click',
        //XX GRA_o.nodeLink__v
        GRA_o.nodeClose__v
      )
  //: keyboard
  /*
  document.addEventListener( 'keyup',
    key_o =>
    {
      if ( key_o.defaultPrevented || !GRA_o.onv}iew__b() ) return
      //>
      const key_sn = key_o.key || key_o.keyCode
      if ( [ 'Escape', 'Esc', 27 ].includes( key_sn ) ||
           [ 'Backspace', 'Back', 8 ].includes( key_sn ) ) GRA_o.onview__s()    // ESC || BACKSPACE close
      else
      {
        switch ( true )
        {
          case ( [ 'ArrowLeft', 'Left', 37 ].includes( key_sn ) ) :    //: LEFT
            GRA_o.slider.toNearest__v( -1 )
            break
          case ( [ 'ArrowRight', 'Right', 39 ].includes( key_sn ) ) :    //: RIGHT
            GRA_o.slider.toNearest__v( 1 )
            break
          case ( [ 'ArrowUp', 'Up', 38 ].includes( key_sn ) ) :    //: UP
            GRA_o.slider.toNearest__v( -4 )
            break
          case ( [ 'ArrowDown', 'Down', 40 ].includes( key_sn ) ) :    //: DOWN
            GRA_o.slider.toNearest__v( 4 )
            break
          case ( [ 'Enter', 13 ].includes( key_sn ) ) :    //: ENTER
            GRA_o.onview__s()
            break
          default:
            break
        }
      }
      key_o.preventDefault()
      key_o.stopPropagation()
    }, true )
  */
  

  /*//XXXXXXXXXXXXXXXX
  document.querySelector( '[data-path]' )    //:!!! TEMPORARY: will be graph nodes
    .addEventListener( 'click',
      click_o =>
      {
        const path_s = click_o.target.dataset.path
        const slot_s = click_o.target.dataset.slot_s
        const step_n = GRA_o.slider.capacity__n()
        if ( !GRA_o.loaded__b( slot_s ) )
        {
          LIB_o.slot__v( path_s, slot_s, step_n,
           ( _e, section_e ) =>
           {
             section_e.dataset.slot_s = slot_s
             section_e.dataset.slot_n = step_n
             GRA_o.slider.add__v( section_e )
           } )
       
        }
        const view_s = GRA_o.onview__s()
        GRA_o.view__v( view_s )
      } )
      */
  
  }
,



}



void async function
()
{
  //...let json_o =
  //...  await GRA_o
  //...    .fetch__v( `http://127.0.0.1:8080/assets/data/json/graph.json` )
  //...GRA_o.graph_c =
  //...  Graph
  //...    .json__c( json_o )
  //?? IND_o
  //??   .colorMode__v
  //??     ( 'hue_base' )
  //?? IND_o
  //??   .colorMode__v
  //??     ( 'lum_mode' )
  GRA_o.svg_e =
    LIB_o
      .nodeId__o( 'graph_svg' )
  GRA_o.slider_e =
    LIB_o
      .nodeId__o( 'graph_slider' )
  const labelsList_e =
    LIB_o
      .nodeId__o( 'labels_docs' )
  GRA_o.slider =
    new Slider3D
    (
      GRA_o.slider_e,
      labelsList_e,
    )
  LIB_o
    .rootVar__v
    (
      '--LABELS_CAP',
      labelsList_e.children.length
    )
  GRA_o
    .listen__v()
} ()


